{"./":{"url":"./","title":"Introduction","keywords":"","body":"Notes github pages gitbook pages "},"ROS/":{"url":"ROS/","title":"ROS","keywords":"","body":"ROS机器人操作系统 "},"ROS/ROS-1.html":{"url":"ROS/ROS-1.html","title":"ROS开发环境","keywords":"","body":"ROS 开发环境 1. 版本选择 ROS版本 Ubuntu 版本 ROS Kinetic Kame Ubuntu 16.04 ROS Melodic Morenia Ubuntu 18.04 ROS Noetic Ninjemys Ubuntu 20.04 ros的各个版本之间不相互兼容，安装前需要注意版本对应 2. 添加软件源 使用中科大的镜像源安装ROS sudo sh -c '. /etc/lsb-release && echo \"deb http://mirrors.ustc.edu.cn/ros/ubuntu/ $DISTRIB_CODENAME main\" > /etc/apt/sources.list.d/ros-latest.list' 3. 添加keys sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116 apt-key用于管理Debian Linux系统中的软件包密钥。每个发布的deb包，都是通过密钥认证的，apt-key用来管理密钥。 4. 更新软件源 sudo apt-get update sudo apt-get upgrade update是更新软件列表，upgrade是更新已安装的软件 参考apt-get update与upgrade的区别 5. 安装ROS ros官方提供四种安装方式，Ubuntu16.04安装Kinetic版本 桌面完整版安装 包括ROS、rqt、rviz、通用机器人函数库、2D/3D仿真器、导航以及2D/3D感知功能 sudo apt-get install ros-kinetic-desktop-full 桌面版安装 包含ROS、rqt、rviz以及通用机器人函数库 sudo apt-get install ros-kinetic-desktop 基础版安装 包含ROS核心软件包、构建工具以及通信相关的程序库，无GUI工具 sudo apt-get install ros-kinetic-ros-base 单独软件包安装 可以用来安装指定软件包，这种安装方式在运行ROS缺少某些package依赖时会经常用到。 sudo apt-get install ros-kinetic-PACKAGE 用包名替代上述命令中的PACKAGE可安装相应的功能包 6. 配置ROS 6.1. 初始化rosdep sudo rosdep init sudo rosdep update 这里可能会因为github站点网络链接问题而报错，使用代理即可解决 6.2. ROS环境变量设置 echo \"source /opt/ros/kinetic/setup.bash\" >> ~/.bashrc 相当于每次打开终端都执行遍source命令 6.3. 安装rosinstall sudo apt-get install python-rosinstall 7. 测试ROS环境 7.1. 启动roscore roscore 成功启动后如下图所示 7.2. 启动海龟测试节点 rosrun turtlesim turtlesim_node turtlesim_node节点是模拟海龟运动的节点 7.3. 启动控制节点 rosrun turtlesim turtle_teleop_key turtle_teleop_key节点是键盘控制节点 "},"ROS/ROS-2.html":{"url":"ROS/ROS-2.html","title":"二进制包和源码包","keywords":"","body":"二进制包和源码包 1. 区别 二进制包是可以直接通过使用sudo apt-get install命令进行安装的，能够直接使用而无需重新编译。 源代码包是程序的源代码，能够根据具体情况进行修改，再经过计算机编译，生成二进制可执行文件才能运行。 区别 二进制包 源代码包 下载方式 sudo apt-get install git clone ROS包存放位置 /opt/ros/kinetic/ 随意存放，一般为工作目录 应用场景 基础软件 第三方程序，需要修改的源码 2. ROS二进制包的安装 例如安装GMapping包 sudo apt-get install ros-kinetic-slam-gmapping 所有apt官方的ROS功能包命名均为ros-版本代号-功能包名, kinect为Ubuntu16.04下的ROS的名称 3. 源码安装 以ROS-Academy-for-Beginners为例进行安装 3.1. 创建工作空间 mkdir -p ~/tutorial_ws/src cd tutorial_ws/src 3.2. 下载源码 git clone https://github.com/DroidAITech/ROS-Academy-for-Beginners.git 3.3. 安装依赖 在ros工作空间内安装全部包的依赖 cd ~/tutorial_ws rosdep install --from-paths src --ignore-src --rosdistro=kinetic -y 另外需要Gazebo的版本高于 7.0，可通过gazebo -v查看当前版本，升级步骤如下 sudo sh -c 'echo \"deb http://packages.osrfoundation.org/gazebo/ubuntu-stable `lsb_release -cs` main\" > /etc/apt/sources.list.d/gazebo-stable.list' wget http://packages.osrfoundation.org/gazebo.key -O - | sudo apt-key add - sudo apt-get update sudo apt-get install gazebo7 3.4. 编译 cd ~/tutorial_ws catkin_make source ~/tutorial_ws/devel/setup.bash source命令在每一次打开新终端的时候都要执行一次，故可以写入~/.bashrc catkin_make是一个编译构建系统 3.5. 运行仿真程序 roslaunch robot_sim_demo robot_spawn.launch "},"ROS/ROS-3.html":{"url":"ROS/ROS-3.html","title":"ROS工作空间","keywords":"","body":"ROS 工作空间 1. Catkin编译系统 源码需要编译、链接等步骤才能生成二进制可执行文件，对于 ROS 等大型项目而言，需要管理项目结构，进行自动化编译等。 Catkin 是 ROS 对 CMake 进行拓展之后的，CMake 能够生成makefile文件，进而能够控制编译的过程 Catkin 编译系统的层级结构如图 1.1. Catkin编译流程 在工作空间catkinws/src/下进行递归查询每一个ROS包 ROS包中有package.xml和CMakeLists.txt文件，则根据CMakeLists.txt生成相应的makefile文件 再 make 进行编译 相当于catkin_make是将cmake与make进行了合并操作，同时提高了跨项目依赖性 1.2. 使用catkin_make进行编译 必须要在工作空间的目录下执行catkin_make，之后需要source命令更新环境变量，否则rosrun无法执行ros包 cd ~/catkinws catkin_make source ./devel/setup.bash 2. ROS工作空间结构 ─ build │ ├── catkin │ │ └── catkin_generated │ │ └── version │ │ └── package.cmake │ ├── ...... │ ├── catkin_make.cache │ ├── CMakeCache.txt │ ├── CMakeFiles │ │ ├── ...... ├── devel │ ├── env.sh │ ├── lib │ ├── setup.bash │ ├── setup.sh │ ├── _setup_util.py │ └── setup.zsh └── src └── CMakeLists.txt -> /opt/ros/kinetic/share/catkin/cmake/toplevel.cmake src/用于存放各种package，其中同一类多个功能包可以存放在一个子目录下 build/用于存放编译过程中的中间文件，缓存信息等 devel/用于存放生成的目标文件，包括可执行文件，静态链接库，动态链接库等 src/下的源代码，经过编译生成中间文件，存在build/下，build/下的文件再经过链接等处理，最后生成可执行文件，库文件等，存放在devel/ src/下允许存在多个package，在ROS工作空间下的各个package可以在子目录下 "},"ROS/ROS-4.html":{"url":"ROS/ROS-4.html","title":"packages","keywords":"","body":"packages 1. package结构 package是catkin编译的基本单元，一个package可以编译出来多个目标文件（ROS可执行程序、动态静态库、头文件等等） ├── CMakeLists.txt #package的编译规则(必须) ├── package.xml #package的描述信息(必须) ├── src/ #源代码文件 ├── include/ #C++头文件 ├── scripts/ #可执行脚本 ├── msg/ #自定义消息 ├── srv/ #自定义服务 ├── action/ #自定义服务 ├── models/ #3D模型文件 ├── urdf/ #urdf文件 ├── launch/ #launch文件 ├── config/ #参数配置文件 CMakeLists.txt文件和package.xml文件，这两个文件定义了package CMakeLists.txt定义的是package的编译规则，用到的依赖关系等 package.xml定义的是功能包相关的信息，描述package的包名、版本号、作者、依赖等信息 src/存放的是源代码文件，主要是cpp源码以及python的module文件 include/存放的是hpp头文件 scripts/存放的是脚本文件，shell脚本、python脚本等 msg/存放的是自定义格式的消息文件（*.msg） srv/存放的是自定义格式的服务文件（*.srv） action/存放的是自定义格式的动作文件（*.action） models/存放机器人或仿真场景的3D模型（.sda, .stl, .dae等） urdf/存放机器人的模型描述（.urdf, .xacro） launch/存放的是启动文件（*.launch） config/存放的是全局配置文件（*.yaml） 2. 创建package 创建一个package需要在catkin_ws/src/下，用到catkin_create_pkg命令，相当于脚手架，搭建package框架结构 catkin_create_pkg package depends 其中package是包名，depends是依赖的包名，可以依赖多个软件包。 例如，新建一个package叫做test_pkg，依赖roscpp、rospy、std_msgs(常用依赖)。 catkin_create_pkg test_pkg roscpp rospy std_msgs 此时目录结构为 ├── CMakeLists.txt ├── include │ └── test_pkg ├── package.xml └── src catkin_create_pkg默认创建好了CMakeLists.txt和package.xml，并将项目依赖项添加到了package.xml 3. package相关的命令 3.1. rospack rospack是ros的package管理工具 rostopic命令 作用 rospack help 显示rospack的用法 rospack list 列出本机所有package rospack depends [package] 显示package的依赖包 rospack find [package] 定位某个package rospack profile 刷新所有package的位置记录 package缺省则默认为当前目录下的package 3.2. roscd roscd命令类似与Linux系统的cd，改进之处在于roscd可以直接改变目录到ROS的软件包目录下 3.3. rosls rosls也可以视为Linux指令ls的改进版，可以直接在任意目录下列出相应ROS软件包的内容 rosls [pacakge]列出pacakge下的文件 3.4. rosdep rosdep是用于管理ROS package依赖项的命令行工具 rosdep命令 作用 rosdep check [pacakge] 检查package的依赖是否满足 rosdep install [pacakge] 安装pacakge的依赖 rosdep db 生成和显示依赖数据库 rosdep init 初始化/etc/ros/rosdep中的源 rosdep keys 检查package的依赖是否满足 rosdep update 更新本地的rosdep数据库 一个较常使用的命令是rosdep install --from-paths src --ignore-src --rosdistro=kinetic -y，用于安装工作空间中src路径下所有package的依赖项（由pacakge.xml文件指定） 4. Metapackage元功能包 4.1. Metapackage介绍 Metapackage是一个功能包集合，把几个相近的功能模块、软件包放到一起，之前叫Stack。元功能包本身没有实质性的功能，但是依赖于多个软件包，相当于一个集合 ROS里常见的Metapacakge有： Metapacakge名称 描述 链接 navigation 导航相关的功能包集 https://github.com/ros-planning/navigation moveit 运动规划相关的（主要是机械臂）功能包集 https://github.com/ros-planning/moveit image_pipeline 图像获取、处理相关的功能包集 https://github.com/ros-perception/image_common vision_opencv ROS与OpenCV交互的功能包集 https://github.com/ros-perception/vision_opencv turtlebot Turtlebot机器人相关的功能包集 https://github.com/turtlebot/turtlebot pr2_robot pr2机器人驱动功能包集 https://github.com/PR2/pr2_robot ... ... ... 以上列举了一些常见的功能包集，例如navigation、turtlebot，他们都是用于某一方面的功能，以navigation metapackage（官方介绍里仍然沿用stack的叫法）为例，它包括了以下软件包： 包名 功能 navigation Metapacakge，依赖以下所有pacakge amcl 定位 fake_localization 定位 map_server 提供地图 move_base 路径规划节点 nav_core 路径规划的接口类 base_local_planner 局部规划 dwa_local_planner 局部规划 ... ... ... 4.2. Metapackage结构 我们以ROS-Academy-for-beginners为例介绍meteapckage的写法，在教学包内，有一个ros-academy-for-beginners软件包，该包即为一个metapacakge，其中有且仅有两个文件：CMakeLists.txt和pacakge.xml。 CMakeLists.txt写法如下： cmake_minimum_required(VERSION 2.8.3) project(ros_academy_for_beginners) find_package(catkin REQUIRED) catkin_metapackage() #声明本软件包是一个metapacakge pacakge.xml写法如下： ros_academy_for_beginners 17.12.4 -------------------------------------------------------------------------- A ROS tutorial for beginner level learners. This metapacakge includes some demos of topic, service, parameter server, tf, urdf, navigation, SLAM... It tries to explain the basic concepts and usages of ROS. -------------------------------------------------------------------------- Chai Changkun Chai Changkun BSD http://http://www.droid.ac.cn catkin navigation_sim_demo param_demo robot_sim_demo service_demo slam_sim_demo tf_demo topic_demo metapacakge中的以上两个文件和普通pacakge不同点是： CMakeLists.txt:加入了catkin_metapackage()宏，指定本软件包为一个metapacakge。 package.xml:标签将所有软件包列为依赖项，标签中添加标签声明。 metapacakge在我们实际开发一个大工程时可能有用 "},"ROS/ROS-5.html":{"url":"ROS/ROS-5.html","title":"CMakeLists.txt","keywords":"","body":"CMakeLists.txt CMakeLists.txt原本是Cmake编译系统的规则文件，而Catkin编译系统基本沿用了CMake的编译风格，只是针对ROS工程添加了一些宏定义。所以在写法上，catkin的CMakeLists.txt与CMake的基本一致。 CMake参考书 cmake-practice 这个文件直接规定了这个package要依赖哪些package，要编译生成哪些目标，如何编译等等流程。所以CMakeLists.txt非常重要，它指定了由源码到目标文件的规则，catkin编译系统在工作时首先会找到每个package下的CMakeLists.txt，然后按照规则来编译构建。 turtlesim的CMakeLists 以turtlesim小海龟这个pacakge为例，roscd tuetlesim查看，在turtlesim/CMakeLists.txt的写法如下: cmake_minimum_required(VERSION 2.8.3) #CMake至少为2.8.3版 project(turtlesim) #项目(package)名称为turtlesim，在后续文件中可使用变量${PROJECT_NAME}来引用项目名称turltesim find_package(catkin REQUIRED COMPONENTS geometry_msgs message_generation rosconsole roscpp roscpp_serialization roslib rostime std_msgs std_srvs) #cmake宏，指定依赖的其他pacakge，实际是生成了一些环境变量，如_FOUND, _INCLUDE_DIRS, _LIBRARYIS #此处catkin是必备依赖 其余的geometry_msgs...为组件 find_package(Qt5Widgets REQUIRED) find_package(Boost REQUIRED COMPONENTS thread) include_directories(include ${catkin_INCLUDE_DIRS} ${Boost_INCLUDE_DIRS}) #指定C++的头文件路径 link_directories(${catkin_LIBRARY_DIRS}) #指定链接库的路径 add_message_files(DIRECTORY msg FILES Color.msg Pose.msg) #自定义msg文件 add_service_files(DIRECTORY srv FILES Kill.srv SetPen.srv Spawn.srv TeleportAbsolute.srv TeleportRelative.srv) #自定义srv文件 generate_messages(DEPENDENCIES geometry_msgs std_msgs std_srvs) #在add_message_files、add_service_files宏之后必须加上这句话，用于生成srv msg头文件/module，生成的文件位于devel/include中 catkin_package(CATKIN_DEPENDS geometry_msgs message_runtime std_msgs std_srvs) # catkin宏命令，用于配置ROS的package配置文件和CMake文件 # 这个命令必须在add_library()或者add_executable()之前调用，该函数有5个可选参数： # (1) INCLUDE_DIRS - 导出包的include路径 # (2) LIBRARIES - 导出项目中的库 # (3) CATKIN_DEPENDS - 该项目依赖的其他catkin项目 # (4) DEPENDS - 该项目所依赖的非catkin CMake项目。 # (5) CFG_EXTRAS - 其他配置选项 set(turtlesim_node_SRCS src/turtlesim.cpp src/turtle.cpp src/turtle_frame.cpp ) set(turtlesim_node_HDRS include/turtlesim/turtle_frame.h ) #指定turtlesim_node_SRCS、turtlesim_node_HDRS变量 qt5_wrap_cpp(turtlesim_node_MOCS ${turtlesim_node_HDRS}) add_executable(turtlesim_node ${turtlesim_node_SRCS} ${turtlesim_node_MOCS}) # 指定可执行文件目标turtlesim_node target_link_libraries(turtlesim_node Qt5::Widgets ${catkin_LIBRARIES} ${Boost_LIBRARIES}) # 指定链接可执行文件 add_dependencies(turtlesim_node turtlesim_gencpp) add_executable(turtle_teleop_key tutorials/teleop_turtle_key.cpp) target_link_libraries(turtle_teleop_key ${catkin_LIBRARIES}) add_dependencies(turtle_teleop_key turtlesim_gencpp) add_executable(draw_square tutorials/draw_square.cpp) target_link_libraries(draw_square ${catkin_LIBRARIES} ${Boost_LIBRARIES}) add_dependencies(draw_square turtlesim_gencpp) add_executable(mimic tutorials/mimic.cpp) target_link_libraries(mimic ${catkin_LIBRARIES}) add_dependencies(mimic turtlesim_gencpp) # 同样指定可执行目标、链接、依赖 install(TARGETS turtlesim_node turtle_teleop_key draw_square mimic RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}) # 安装目标文件到本地系统 install(DIRECTORY images DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION} FILES_MATCHING PATTERN \"*.png\" PATTERN \"*.svg\") "},"ROS/ROS-6.html":{"url":"ROS/ROS-6.html","title":"package.xml","keywords":"","body":"package.xml 1. package.xml作用 package.xml也是一个catkin的package必备文件，它是这个软件包的描述文件，用于描述pacakge的基本信息。pacakge.xml包含了package的名称、版本号、内容描述、维护人员、软件许可、编译构建工具、编译依赖、运行依赖等信息。 实际上rospack find、rosdep等命令之所以能快速定位和分析出package的依赖项信息，就是直接读取了每一个pacakge中的package.xml文件。它为用户提供了快速了解一个pacakge的渠道。 2. package.xml写法 目前Indigo、Kinetic、Lunar等版本的ROS都同时支持两种版本的package.xml，所以无论选format1还是format2都可以。 参考解析 package.xml 文件 2.1. format2 在新版本（format2）中，包含的标签为： 标签名 作用 根标记文件 包名 版本号 内容描述 维护者 软件许可证 编译构建工具，通常为catkin 指定依赖项为编译、导出、运行需要的依赖，最常用 编译依赖项 导出依赖项 运行依赖项 测试用例依赖项 文档依赖项 相当于、、 ,相当于将之前的build和run依赖项描述进行了细分。 每个ROS功能包都至少有一个依赖项，一个指定了构建、执行、测试、文档依赖项的 xml 文件如下： sensor_funsion 1.2.3 This package fusion point cloud and image. www.xxx.com DLonng xxx BSD catkin roscpp std_msgs message_generation message_runtime rospy python-mock doxygen 2.2. format1 pacakge.xml遵循xml标签文本的写法，由于版本更迭原因，现在有两种格式并存（format1与format2），不过区别不大。老版本（format1）的pacakge.xml通常包含以下标签: 标签名 作用 根标记文件 包名 版本号 内容描述 维护者 软件许可证 编译构建工具，通常为catkin 编译依赖项 运行依赖项 测试用例依赖项 sensor_funsion 1.2.3 This package fusion point cloud and image. www.xxx.com DLonng xxx BSD 3. pacakge.xml例子 为了说明pacakge.xml写法，还是以turtlesim软件包为例，其pacakge.xml文件内容如下，我们添加了相关的注释： turtlesim 0.8.1 turtlesim is a tool made for teaching ROS and ROS packages. Dirk Thomas BSD http://www.ros.org/wiki/turtlesim https://github.com/ros/ros_tutorials/issues https://github.com/ros/ros_tutorials Josh Faust catkin geometry_msgs qtbase5-dev message_generation qt5-qmake rosconsole roscpp roscpp_serialization roslib rostime std_msgs std_srvs geometry_msgs libqt5-core libqt5-gui message_runtime rosconsole roscpp roscpp_serialization roslib rostime std_msgs std_srvs 以上内容是老版本（format1）的写法，如果要写成新版本（format2）则可以改为： turtlesim 0.8.1 turtlesim is a tool made for teaching ROS and ROS packages. Dirk Thomas BSD http://www.ros.org/wiki/turtlesim https://github.com/ros/ros_tutorials/issues https://github.com/ros/ros_tutorials Josh Faust catkin geometry_msgs rosconsole roscpp roscpp_serialization roslib rostime std_msgs std_srvs qtbase5-dev message_generation qt5-qmake libqt5-core libqt5-gui message_runtime "}}