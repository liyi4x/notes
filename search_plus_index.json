{"./":{"url":"./","title":"Introduction","keywords":"","body":"Notes github pages gitbook pages "},"ROS/":{"url":"ROS/","title":"ROS","keywords":"","body":"ROS机器人操作系统 "},"ROS/ROS-1.html":{"url":"ROS/ROS-1.html","title":"ROS开发环境","keywords":"","body":"ROS 开发环境 1. 版本选择 ROS版本 Ubuntu 版本 ROS Kinetic Kame Ubuntu 16.04 ROS Melodic Morenia Ubuntu 18.04 ROS Noetic Ninjemys Ubuntu 20.04 ros的各个版本之间不相互兼容，安装前需要注意版本对应 2. 添加软件源 使用中科大的镜像源安装ROS sudo sh -c '. /etc/lsb-release && echo \"deb http://mirrors.ustc.edu.cn/ros/ubuntu/ $DISTRIB_CODENAME main\" > /etc/apt/sources.list.d/ros-latest.list' 3. 添加keys sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116 apt-key用于管理Debian Linux系统中的软件包密钥。每个发布的deb包，都是通过密钥认证的，apt-key用来管理密钥。 4. 更新软件源 sudo apt-get update sudo apt-get upgrade update是更新软件列表，upgrade是更新已安装的软件 参考链接 apt-get update与upgrade的区别 5. 安装ROS ros官方提供四种安装方式，Ubuntu16.04安装Kinetic版本 桌面完整版安装 包括ROS、rqt、rviz、通用机器人函数库、2D/3D仿真器、导航以及2D/3D感知功能 sudo apt-get install ros-kinetic-desktop-full 桌面版安装 包含ROS、rqt、rviz以及通用机器人函数库 sudo apt-get install ros-kinetic-desktop 基础版安装 包含ROS核心软件包、构建工具以及通信相关的程序库，无GUI工具 sudo apt-get install ros-kinetic-ros-base 单独软件包安装 可以用来安装指定软件包，这种安装方式在运行ROS缺少某些package依赖时会经常用到。 sudo apt-get install ros-kinetic-PACKAGE 用包名替代上述命令中的PACKAGE可安装相应的功能包 6. 配置ROS 初始化rosdep sudo rosdep init sudo rosdep update 这里可能会因为github站点网络链接问题而报错，使用代理即可解决 ROS环境变量设置 echo \"source /opt/ros/kinetic/setup.bash\" >> ~/.bashrc 相当于每次打开终端都执行遍source命令 安装rosinstall sudo apt-get install python-rosinstall 7. 测试ROS环境 启动roscore roscore 成功启动后如下图所示 启动海龟测试节点 rosrun turtlesim turtlesim_node turtlesim_node节点是模拟海龟运动的节点 启动控制节点 rosrun turtlesim turtle_teleop_key turtle_teleop_key节点是键盘控制节点 "},"ROS/ROS-2.html":{"url":"ROS/ROS-2.html","title":"二进制包和源码包","keywords":"","body":"二进制包和源码包 1. 区别 二进制包是可以直接通过使用sudo apt-get install命令进行安装的，能够直接使用而无需重新编译。 源代码包是程序的源代码，能够根据具体情况进行修改，再经过计算机编译，生成二进制可执行文件才能运行。 区别 二进制包 源代码包 下载方式 sudo apt-get install git clone ROS包存放位置 /opt/ros/kinetic/ 随意存放，一般为工作目录 应用场景 基础软件 第三方程序，需要修改的源码 2. ROS二进制包的安装 例如安装GMapping包 sudo apt-get install ros-kinetic-slam-gmapping 所有apt官方的ROS功能包命名均为ros-版本代号-功能包名, kinect为Ubuntu16.04下的ROS的名称 3. 源码安装 以ROS-Academy-for-Beginners为例进行安装 3.1. 创建工作空间 mkdir -p ~/tutorial_ws/src cd tutorial_ws/src 3.2. 下载源码 git clone https://github.com/DroidAITech/ROS-Academy-for-Beginners.git 3.3. 安装依赖 在ros工作空间内安装全部包的依赖 cd ~/tutorial_ws rosdep install --from-paths src --ignore-src --rosdistro=kinetic -y 另外需要Gazebo的版本高于 7.0，可通过gazebo -v查看当前版本，升级步骤如下 sudo sh -c 'echo \"deb http://packages.osrfoundation.org/gazebo/ubuntu-stable `lsb_release -cs` main\" > /etc/apt/sources.list.d/gazebo-stable.list' wget http://packages.osrfoundation.org/gazebo.key -O - | sudo apt-key add - sudo apt-get update sudo apt-get install gazebo7 3.4. 编译 cd ~/tutorial_ws catkin_make source ~/tutorial_ws/devel/setup.bash source命令在每一次打开新终端的时候都要执行一次，故可以写入~/.bashrc catkin_make是一个编译构建系统 3.5. 运行仿真程序 roslaunch robot_sim_demo robot_spawn.launch "},"ROS/ROS-3.html":{"url":"ROS/ROS-3.html","title":"ROS工作空间","keywords":"","body":"ROS 工作空间 1. Catkin编译系统 源码需要编译、链接等步骤才能生成二进制可执行文件，对于 ROS 等大型项目而言，需要管理项目结构，进行自动化编译等。 Catkin 是 ROS 对 CMake 进行拓展之后的，CMake 能够生成makefile文件，进而能够控制编译的过程 Catkin 编译系统的层级结构如图 1.1. Catkin编译流程 在工作空间catkinws/src/下进行递归查询每一个ROS包 ROS包中有package.xml和CMakeLists.txt文件，则根据CMakeLists.txt生成相应的makefile文件 再 make 进行编译 相当于catkin_make是将cmake与make进行了合并操作，同时提高了跨项目依赖性 1.2. 使用catkin_make进行编译 必须要在工作空间的目录下执行catkin_make，之后需要source命令更新环境变量，否则rosrun无法执行ros包 cd ~/catkinws catkin_make source ./devel/setup.bash 2. ROS工作空间结构 ─ build │ ├── catkin │ │ └── catkin_generated │ │ └── version │ │ └── package.cmake │ ├── ...... │ ├── catkin_make.cache │ ├── CMakeCache.txt │ ├── CMakeFiles │ │ ├── ...... ├── devel │ ├── env.sh │ ├── lib │ ├── setup.bash │ ├── setup.sh │ ├── _setup_util.py │ └── setup.zsh └── src └── CMakeLists.txt -> /opt/ros/kinetic/share/catkin/cmake/toplevel.cmake src/用于存放各种package，其中同一类多个功能包可以存放在一个子目录下 build/用于存放编译过程中的中间文件，缓存信息等 devel/用于存放生成的目标文件，包括可执行文件，静态链接库，动态链接库等 src/下的源代码，经过编译生成中间文件，存在build/下，build/下的文件再经过链接等处理，最后生成可执行文件，库文件等，存放在devel/ 2.1. package结构 package是catkin编译的基本单元，一个package可以编译出来多个目标文件（ROS可执行程序、动态静态库、头文件等等） ├── CMakeLists.txt #package的编译规则(必须) ├── package.xml #package的描述信息(必须) ├── src/ #源代码文件 ├── include/ #C++头文件 ├── scripts/ #可执行脚本 ├── msg/ #自定义消息 ├── srv/ #自定义服务 ├── action/ #自定义服务 ├── models/ #3D模型文件 ├── urdf/ #urdf文件 ├── launch/ #launch文件 ├── config/ #参数配置文件 CMakeLists.txt文件和package.xml文件，这两个文件定义了package CMakeLists.txt定义的是package的编译规则，用到的依赖关系等 package.xml定义的是功能包相关的信息，描述package的包名、版本号、作者、依赖等信息 src/存放的是源代码文件，主要是cpp源码以及python的module文件 include/存放的是hpp头文件 scripts/存放的是脚本文件，shell脚本、python脚本等 msg/存放的是自定义格式的消息文件（*.msg） srv/存放的是自定义格式的服务文件（*.srv） action/存放的是自定义格式的动作文件（*.action） models/存放机器人或仿真场景的3D模型（.sda, .stl, .dae等） urdf/存放机器人的模型描述（.urdf, .xacro） launch/存放的是启动文件（*.launch） config/存放的是全局配置文件（*.yaml） 2.2. 创建package 创建一个package需要在catkin_ws/src/下，用到catkin_create_pkg命令，相当于脚手架，搭建package框架结构 catkin_create_pkg package depends 其中package是包名，depends是依赖的包名，可以依赖多个软件包。 例如，新建一个package叫做test_pkg，依赖roscpp、rospy、std_msgs(常用依赖)。 catkin_create_pkg test_pkg roscpp rospy std_msgs 此时目录结构为 ├── CMakeLists.txt ├── include │ └── test_pkg ├── package.xml └── src catkin_create_pkg默认创建好了CMakeLists.txt和package.xml，并将项目依赖项添加到了package.xml 3. package相关的命令 3.1. rospack rospack是ros的package管理工具 rostopic命令 作用 rospack help 显示rospack的用法 rospack list 列出本机所有package rospack depends [package] 显示package的依赖包 rospack find [package] 定位某个package rospack profile 刷新所有package的位置记录 package缺省则默认为当前目录下的package 3.2. roscd roscd命令类似与Linux系统的cd，改进之处在于roscd可以直接改变目录到ROS的软件包目录下 3.3. rosls rosls也可以视为Linux指令ls的改进版，可以直接在任意目录下列出相应ROS软件包的内容 rosls [pacakge]列出pacakge下的文件 3.4. rosdep rosdep是用于管理ROS package依赖项的命令行工具 rosdep命令 作用 rosdep check [pacakge] 检查package的依赖是否满足 rosdep install [pacakge] 安装pacakge的依赖 rosdep db 生成和显示依赖数据库 rosdep init 初始化/etc/ros/rosdep中的源 rosdep keys 检查package的依赖是否满足 rosdep update 更新本地的rosdep数据库 一个较常使用的命令是rosdep install --from-paths src --ignore-src --rosdistro=kinetic -y，用于安装工作空间中src路径下所有package的依赖项（由pacakge.xml文件指定） "}}